{
	"info": {
		"_postman_id": "b4282dc3-2356-41ec-a3f3-5e90d0ee9b65",
		"name": "IS 18003 Part 3: Resource Access Service (Latest)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20457128"
	},
	"item": [
		{
			"name": "Get Token",
			"item": [
				{
					"name": "Get token for accessing the Open Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"openResourceToken\", jsonData.results.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "addTokenTo",
									"value": "queryParams",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "bb0c11ce-a275-40c5-8ccf-8da20c6b7660",
								"type": "default"
							},
							{
								"key": "clientSecret",
								"value": "f3615492a11affebc46fba42af4cb59a63aedb2e",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"rs.iudx.io\",\n  \"itemType\": \"resource_server\",\n  \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/auth/v1/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get token for accessing the Secure Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"secureResourceToken\", jsonData.results.accessToken);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "addTokenTo",
									"value": "queryParams",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "bb0c11ce-a275-40c5-8ccf-8da20c6b7660",
								"type": "default"
							},
							{
								"key": "clientSecret",
								"value": "f3615492a11affebc46fba42af4cb59a63aedb2e",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n  \"itemType\": \"resource\",\n  \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/auth/v1/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get token for accessing the Open Resource as file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson=pm.response.json();",
									"pm.globals.set(\"consumerToken\", responseJson.token);",
									"pm.globals.set(\"adapterToken\", responseJson.token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "addTokenTo",
									"value": "queryParams",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "bb0c11ce-a275-40c5-8ccf-8da20c6b7660",
								"type": "default"
							},
							{
								"key": "clientSecret",
								"value": "f3615492a11affebc46fba42af4cb59a63aedb2e",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n  \"itemType\": \"resource\",\n  \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/auth/v1/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "G0 (Temporal)",
			"item": [
				{
					"name": "Temporal Search",
					"item": [
						{
							"name": "Test 001a: 200 (success) temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"b58da193-23d9-43eb-b98a-a103d4b6103c\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=between&time=2020-11-22T12:59:59Z&endtime=2020-11-23T19:00:00Z",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "timerel",
											"value": "between"
										},
										{
											"key": "time",
											"value": "2020-11-22T12:59:59Z"
										},
										{
											"key": "endtime",
											"value": "2020-11-23T19:00:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 002a: 400 (invalid params) temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerelation=between&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "timerelation",
											"value": "between"
										},
										{
											"key": "time",
											"value": "2020-09-18T14:20:00Z"
										},
										{
											"key": "endtime",
											"value": "2020-09-19T14:20:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 002b: 404 (not found) temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 404 (Not Found)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&timerel=between&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "timerel",
											"value": "between"
										},
										{
											"key": "time",
											"value": "2020-09-18T14:20:00Z"
										},
										{
											"key": "endtime",
											"value": "2020-09-19T14:20:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 002c: 401(invalid credentials) temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=between&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "timerel",
											"value": "between"
										},
										{
											"key": "time",
											"value": "2020-09-18T14:20:00Z"
										},
										{
											"key": "endtime",
											"value": "2020-09-19T14:20:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 003a: 200 (success) temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"b58da193-23d9-43eb-b98a-a103d4b6103c\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=before&time=2021-09-22T13:00:01Z",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "timerel",
											"value": "before"
										},
										{
											"key": "time",
											"value": "2021-09-22T13:00:01Z"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 004a: 400 (Invalid params) temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=before&timea=2020-09-19T12:00:00Z",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "timerel",
											"value": "before"
										},
										{
											"key": "timea",
											"value": "2020-09-19T12:00:00Z"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 004b: 404 (not found) temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 404 (Not Found)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&timerel=before&time=2020-09-19T12:00:00Z",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "timerel",
											"value": "before"
										},
										{
											"key": "time",
											"value": "2020-09-19T12:00:00Z"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 004c: 401 (invalid credentials) temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=before&time=2020-09-19T12:00:00Z",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "timerel",
											"value": "before"
										},
										{
											"key": "time",
											"value": "2020-09-19T12:00:00Z"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 005a: 200 (success) temporal (after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"b58da193-23d9-43eb-b98a-a103d4b6103c\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=after&time=2020-09-22T13:00:01Z",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "timerel",
											"value": "after"
										},
										{
											"key": "time",
											"value": "2020-09-22T13:00:01Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 006a: 400 (invalid param) temporal (after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerelation=after&time=2020-06-01T14:20:01Z",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "timerelation",
											"value": "after"
										},
										{
											"key": "time",
											"value": "2020-06-01T14:20:01Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 006b: 404 (not found) temporal (after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 404 (Not Found)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&timerel=after&time=2020-06-01T14:20:01Z",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "timerel",
											"value": "after"
										},
										{
											"key": "time",
											"value": "2020-06-01T14:20:01Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 006c: 401 (invalid credentials) temporal (after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"var jsonData = pm.response.json(); \r",
											"tests[\"Validate response\"] = jsonData.title === \"Not Authorized\";"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=after&time=2020-06-01T14:20:01Z",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "timerel",
											"value": "after"
										},
										{
											"key": "time",
											"value": "2020-06-01T14:20:01Z"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Temporal Count",
					"item": [
						{
							"name": "Test 007a: 200 (success) temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 2562);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{openResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=between&time=2020-09-21T14:20:00Z&endtime=2020-10-19T14:20:00Z&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "timerel",
											"value": "between"
										},
										{
											"key": "time",
											"value": "2020-09-21T14:20:00Z"
										},
										{
											"key": "endtime",
											"value": "2020-10-19T14:20:00Z"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 008a: 400 (invalid params) temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerelation=between&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "timerelation",
											"value": "between"
										},
										{
											"key": "time",
											"value": "2020-09-18T14:20:00Z"
										},
										{
											"key": "endtime",
											"value": "2020-09-19T14:20:00Z"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 008b: 404 (not found) temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 404 (Not Found)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&timerel=between&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "timerel",
											"value": "between"
										},
										{
											"key": "time",
											"value": "2020-09-18T14:20:00Z"
										},
										{
											"key": "endtime",
											"value": "2020-09-19T14:20:00Z"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 008c: 401 (invalid credentials) temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=between&time=2020-09-18T14:20:00Z&endtime=2020-09-19T14:20:00Z&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "timerel",
											"value": "between"
										},
										{
											"key": "time",
											"value": "2020-09-18T14:20:00Z"
										},
										{
											"key": "endtime",
											"value": "2020-09-19T14:20:00Z"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 009a: 200 (success) temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 2554);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=before&time=2020-10-19T12:00:00Z&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "timerel",
											"value": "before"
										},
										{
											"key": "time",
											"value": "2020-10-19T12:00:00Z"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 010a: 400 (Invalid params) temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=before&timeattribute=2020-09-19T12:00:00Z&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "timerel",
											"value": "before"
										},
										{
											"key": "timeattribute",
											"value": "2020-09-19T12:00:00Z"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 010b: 404 (not found) temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 404 (Not Found)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&timerel=before&time=2020-09-19T12:00:00Z&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "timerel",
											"value": "before"
										},
										{
											"key": "time",
											"value": "2020-09-19T12:00:00Z"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 010c: 401 (invalid credentials) temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=before&time=2020-09-19T12:00:00Z&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "timerel",
											"value": "before"
										},
										{
											"key": "time",
											"value": "2020-09-19T12:00:00Z"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 011a: 200 (success) temporal (after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 4091);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerel=after&time=2020-10-18T14:20:01Z&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "timerel",
											"value": "after"
										},
										{
											"key": "time",
											"value": "2020-10-18T14:20:01Z"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 012a: 400(invalid param) temporal (after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&timerelation=after&time=2020-06-01T14:20:01Z&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "timerelation",
											"value": "after"
										},
										{
											"key": "time",
											"value": "2020-06-01T14:20:01Z"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 012b: 404 (not found) temporal (after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 404 (Not Found)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&timerel=after&time=2020-06-01T14:20:01Z&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "timerel",
											"value": "after"
										},
										{
											"key": "time",
											"value": "2020-06-01T14:20:01Z"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 012c: 401 (Invalid credentials) temporal (after)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&timerel=after&time=2020-06-01T14:20:01Z&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "timerel",
											"value": "after"
										},
										{
											"key": "time",
											"value": "2020-06-01T14:20:01Z"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "G0 (Spatial)",
			"item": [
				{
					"name": "Spatial Search",
					"item": [
						{
							"name": "Test 013a: 200 (success) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=bbox&coordinates=[[72.8296,21.2],[72.8297,21.15]]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "bbox"
										},
										{
											"key": "coordinates",
											"value": "[[72.8296,21.2],[72.8297,21.15]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 014a: 400 (invalid params) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=within&geometry=bbox&coordinates=[[72.8296,31.2],[72.8297,31.15]]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georelation",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "bbox"
										},
										{
											"key": "coordinates",
											"value": "[[72.8296,31.2],[72.8297,31.15]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 014b: 401 (invalid credentials) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=bbox&coordinates=[[72.8296,31.2],[72.8297,31.15]]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "bbox"
										},
										{
											"key": "coordinates",
											"value": "[[72.8296,31.2],[72.8297,31.15]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 014c: 404 (not found) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 404 (Not Found)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce812&geoproperty=location&georel=within&geometry=bbox&coordinates=[[72.8296,31.2],[72.8297,31.15]]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce812"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "bbox"
										},
										{
											"key": "coordinates",
											"value": "[[72.8296,31.2],[72.8297,31.15]]"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Spatial Count",
					"item": [
						{
							"name": "Test 015a: 200 (success) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 21);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=bbox&coordinates=[[72.8296,21.2],[72.8297,21.15]]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "bbox"
										},
										{
											"key": "coordinates",
											"value": "[[72.8296,21.2],[72.8297,21.15]]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 016a: 400 (invalid params) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=within&geometry=bbox&coordinates=[[72.8296,31.2],[72.8297,31.15]]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georelation",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "bbox"
										},
										{
											"key": "coordinates",
											"value": "[[72.8296,31.2],[72.8297,31.15]]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 016b: 401 (invalid credentials) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=bbox&coordinates=[[72.8296,31.2],[72.8297,31.15]]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "bbox"
										},
										{
											"key": "coordinates",
											"value": "[[72.8296,31.2],[72.8297,31.15]]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 016c: 404 (not found) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 404 (Not Found)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce812&geoproperty=location&georel=within&geometry=bbox&coordinates=[[72.8296,31.2],[72.8297,31.15]]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce812"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "bbox"
										},
										{
											"key": "coordinates",
											"value": "[[72.8296,31.2],[72.8297,31.15]]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "G0 (Attribute)",
			"item": [
				{
					"name": "Attribute Search",
					"item": [
						{
							"name": "Test 017a: 200 (success) attribute (<)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"b58da193-23d9-43eb-b98a-a103d4b6103c\");",
											"    pm.expect(resultsjsonData).to.have.property(\"referenceLevel\", 15.9);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<16.0;measuredDistance>=14.85",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel<16.0;measuredDistance>=14.85"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 018a: 400 (invalid params) attribute  (<)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel<150.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q1",
											"value": "referenceLevel<150.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 018b: 404 (not found) attribute  (<)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel<150.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "q",
											"value": "referenceLevel<150.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 018c: 401(not authorized) attribute  (<)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed<30.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "q",
											"value": "speed<30.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 019a: 200 (success) attribute (>)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"b58da193-23d9-43eb-b98a-a103d4b6103c\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>15.8",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel>15.8"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 020a: 400 (invalid params) attribute  (>)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel>150.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q1",
											"value": "referenceLevel>150.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 020b: 404 (not found) attribute  (>)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel>150.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "q",
											"value": "referenceLevel>150.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 020c: 401(not authorized) attribute  (>)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed>30.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "q",
											"value": "speed>30.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 021a: 200 (success) attribute (==)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"b58da193-23d9-43eb-b98a-a103d4b6103c\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel==15.9",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel==15.9"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 022a: 400 (invalid params) attribute  (==)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel==150.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q1",
											"value": "referenceLevel==150.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 022b: 404 (not found) attribute  (==)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel==150.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "q",
											"value": "referenceLevel==150.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 022c: 401(not authorized) attribute  (==)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed==30.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "q",
											"value": "speed==30.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 023a: 200 (success) attribute (!=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"b58da193-23d9-43eb-b98a-a103d4b6103c\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel!=15.7",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel!=15.7"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 023b: 204 (Empty Response) attribute (!=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel!=15.9;measuredDistance>=1489.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel!=15.9;measuredDistance>=1489.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 024a: 400 (invalid params) attribute  (!=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel!=150.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q1",
											"value": "referenceLevel!=150.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 024b: 404 (not found) attribute  (!=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel!=150.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "q",
											"value": "referenceLevel!=150.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 024c: 401(not authorized) attribute  (!=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed!=30.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "q",
											"value": "speed!=30.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 025a: 200 (success) attribute (>=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"b58da193-23d9-43eb-b98a-a103d4b6103c\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>=15.9",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel>=15.9"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 025b: 204 (Empty Response) attribute (>=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>=150.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel>=150.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 026a: 400 (invalid params) attribute  (>=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel>=150.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q1",
											"value": "referenceLevel>=150.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 026b: 404 (not found) attribute  (>=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel>=150.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "q",
											"value": "referenceLevel>=150.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 026c: 401(not authorized) attribute  (>=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed>=30.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "q",
											"value": "speed>=30.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 027a: 200 (success) attribute (<=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"b58da193-23d9-43eb-b98a-a103d4b6103c\");",
											"    pm.expect(resultsjsonData).to.have.property(\"referenceLevel\", 15.9);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<=15.9;measuredDistance>=14.85",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel<=15.9;measuredDistance>=14.85"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 027b: 204 (Empty Response) attribute (<=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<=15.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel<=15.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 028a: 400 (invalid params) attribute  (<=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel<=150.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q1",
											"value": "referenceLevel<=150.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 028b: 404 (not found) attribute  (<=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel<=150.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "q",
											"value": "referenceLevel<=150.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 028c: 401(not authorized) attribute  (<=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed<=30.0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "q",
											"value": "speed<=30.0"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Attribute Count",
					"item": [
						{
							"name": "Test 029a: 200 (success) attribute (<)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 2793);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<16.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel<16.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 029b: 204 (Empty Response) attribute (<)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<15.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel<15.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 030a: 400 (invalid params) attribute  (<)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel<150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q1",
											"value": "referenceLevel<150.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 030b: 404 (not found) attribute  (<)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel<150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "q",
											"value": "referenceLevel<150.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 030c: 401(not authorized) attribute  (<)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed<30.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "q",
											"value": "speed<30.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 031a: 200 (success) attribute (>)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 2793);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>15.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel>15.0"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 031b: 204 (Empty Response) attribute (>)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel>150.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 032a: 400 (invalid params) attribute  (>)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel>150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q1",
											"value": "referenceLevel>150.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 032b: 404 (not found) attribute  (>)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel>150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "q",
											"value": "referenceLevel>150.0"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 032c: 401(not authorized) attribute  (>)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed>30.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "q",
											"value": "speed>30.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 033a: 200 (success) attribute (==)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 2793);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel==15.9&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel==15.9"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 033b: 204 (Empty Response) attribute (==)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel==150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel==150.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 034a: 400 (invalid params) attribute  (==)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel==150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q1",
											"value": "referenceLevel==150.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 034b: 404 (not found) attribute  (==)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel==150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "q",
											"value": "referenceLevel==150.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 034c: 401(not authorized) attribute  (==)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed==30.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "q",
											"value": "speed==30.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 035a: 200 (success) attribute (!=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 2793);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel!=15.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel!=15.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 035b: 204 (Empty Response) attribute (!=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel!=15.9;measuredDistance>=14.89&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel!=15.9;measuredDistance>=14.89"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 036a: 400 (invalid params) attribute  (!=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel!=150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q1",
											"value": "referenceLevel!=150.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 036b: 404 (not found) attribute  (!=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel!=150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "q",
											"value": "referenceLevel!=150.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 036c: 401(not authorized) attribute  (!=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed!=30.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "q",
											"value": "speed!=30.0"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 037a: 200 (success) attribute (>=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 2793);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>=15.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel>=15.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 037b: 204 (Empty Response) attribute (>=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel>=150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel>=150.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 038a: 400 (invalid params) attribute  (>=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel>=150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q1",
											"value": "referenceLevel>=150.0"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 038b: 404 (not found) attribute  (>=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel>=150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "q",
											"value": "referenceLevel>=150.0"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 038c: 401(not authorized) attribute  (>=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed>=30.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "q",
											"value": "speed>=30.0"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 039a: 200 (success) attribute (<=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 2793);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<=15.9&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel<=15.9"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 039b: 204 (Empty Response) attribute (<=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q=referenceLevel<=15.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q",
											"value": "referenceLevel<=15.0"
										},
										{
											"key": "options",
											"value": "count"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 040a: 400 (invalid params) attribute  (<=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&q1=referenceLevel<=150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
										},
										{
											"key": "q1",
											"value": "referenceLevel<=150.0"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 040b: 404 (not found) attribute  (<=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=b58da193-23d9-43eb-b98a-a103d4b6101c&q=referenceLevel<=150.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "b58da193-23d9-43eb-b98a-a103d4b6101c"
										},
										{
											"key": "q",
											"value": "referenceLevel<=150.0"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 040c: 401(not authorized) attribute  (<=)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&q=speed<=30.0&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "q",
											"value": "speed<=30.0"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "G1 (Temporal)",
			"item": [
				{
					"name": "Latest Data",
					"item": [
						{
							"name": "Test 041a: 200 (success) Get Latest data (Open Resource)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"b58da193-23d9-43eb-b98a-a103d4b6103c\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{openResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities/b58da193-23d9-43eb-b98a-a103d4b6103c",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"b58da193-23d9-43eb-b98a-a103d4b6103c"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 042a: 404 (not found) Get Latest data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{openResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities/b58da193-23d9-43eb-b98a-a103d4b6102c",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"b58da193-23d9-43eb-b98a-a103d4b6102c"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 042b: 401 (not authorized) Get Latest data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities/83c2e5c2-3574-4e11-9530-2b1fbdfce832",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"83c2e5c2-3574-4e11-9530-2b1fbdfce832"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "G1 (Spatial)",
			"item": [
				{
					"name": "Spatial Search",
					"item": [
						{
							"name": "Test 043a: 200 (success) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxdistance=10&geometry=Point&coordinates=[21.178,72.834]&offset=0&limit=10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "near;maxdistance=10"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[21.178,72.834]"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 043b: 204 (Empty Response) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=1&geometry=Point&coordinates=[31.178,72.834]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "near;maxDistance=1"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[31.178,72.834]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 044a: 400 (invalid params) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=near;maxDistance=10&geometry=Point&coordinates=[21.178,72.834]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georelation",
											"value": "near;maxDistance=10"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[21.178,72.834]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 044b: 401 (invalid credentials) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=10&geometry=Point&coordinates=[21.178,72.834]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "near;maxDistance=10"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[21.178,72.834]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 044c: 404 (not found) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 404 (Not Found)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce812&geoproperty=location&georel=near;maxDistance=1000&geometry=Point&coordinates=[21.178,72.834]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce812"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "near;maxDistance=1000"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[21.178,72.834]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 045a: 200 (success) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.76,21.15],[72.76,21.13],[72.78,21.13],[72.76,21.15]]]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[72.76,21.15],[72.76,21.13],[72.78,21.13],[72.76,21.15]]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 045b: 204 (Empty Response) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.719,31],[72.842,31.2],[72.67,30],[72.719,31]]]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[72.719,31],[72.842,31.2],[72.67,30],[72.719,31]]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 046a: 400 (invalid params) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=within&geometry=Polygon&coordinates=[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georelation",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 046b: 401 (invalid credentials) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 046c: 404 (not found) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 404 (Not Found)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce812&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce812"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 047a: 200 (success) - Geo-Query (Linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.840269,21.204184],[72.750994,21.138154]]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "intersects"
										},
										{
											"key": "geometry",
											"value": "linestring"
										},
										{
											"key": "coordinates",
											"value": "[[72.840269,21.204184],[72.750994,21.138154]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 047b: 204 (Empty Response) - Geo-Query (Linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "intersects"
										},
										{
											"key": "geometry",
											"value": "linestring"
										},
										{
											"key": "coordinates",
											"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 048a: 400 (invalid params) - Geo-Query (Linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georelation",
											"value": "intersects"
										},
										{
											"key": "geometry",
											"value": "linestring"
										},
										{
											"key": "coordinates",
											"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 048b: 401 (invalid credentials) - Geo-Query (Linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "intersects"
										},
										{
											"key": "geometry",
											"value": "linestring"
										},
										{
											"key": "coordinates",
											"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 048c: 404 (not found) - Geo-Query (Linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 404 (Not Found)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce812&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce812"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "intersects"
										},
										{
											"key": "geometry",
											"value": "linestring"
										},
										{
											"key": "coordinates",
											"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Spatial Count",
					"item": [
						{
							"name": "Test 049a: 200 (success) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 20);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=10&geometry=Point&coordinates=[21.178,72.834]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "near;maxDistance=10"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[21.178,72.834]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 049b: 204 (Empty Response) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=1&geometry=Point&coordinates=[31.178,72.834]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "near;maxDistance=1"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[31.178,72.834]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 050a: 400 (invalid params) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=near;maxDistance=10&geometry=Point&coordinates=[21.178,72.834]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georelation",
											"value": "near;maxDistance=10"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[21.178,72.834]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 050b: 401 (invalid credentials) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=near;maxDistance=10&geometry=Point&coordinates=[21.178,72.834]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "near;maxDistance=10"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[21.178,72.834]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 050c: 404 (not found) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 404 (Not Found)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce812&geoproperty=location&georel=near;maxDistance=1000&geometry=Point&coordinates=[21.178,72.834]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce812"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "near;maxDistance=1000"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[21.178,72.834]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 051a: 200 (success) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 2761);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 051b: 204 (Empty Response) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.719,31],[72.842,31.2],[72.67,30],[72.719,31]]]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[72.719,31],[72.842,31.2],[72.67,30],[72.719,31]]]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 052a: 400 (invalid params) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=within&geometry=Polygon&coordinates=[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georelation",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 052b: 401 (invalid credentials) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 052c: 404 (not found) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 404 (Not Found)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce812&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce812"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 053a: 200 (success) - Geo-Query (Linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 9);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.840269,21.204184],[72.750994,21.138154]]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "intersects"
										},
										{
											"key": "geometry",
											"value": "linestring"
										},
										{
											"key": "coordinates",
											"value": "[[72.840269,21.204184],[72.750994,21.138154]]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 053b: 204 (Empty Response) - Geo-Query (Linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"response is 204 (no Content)\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "intersects"
										},
										{
											"key": "geometry",
											"value": "linestring"
										},
										{
											"key": "coordinates",
											"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 054a: 400 (invalid params) - Geo-Query (Linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georelation=intersects&geometry=linestring&coordinates=[[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20]]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georelation",
											"value": "intersects"
										},
										{
											"key": "geometry",
											"value": "linestring"
										},
										{
											"key": "coordinates",
											"value": "[[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20]]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 054b: 401 (invalid credentials) - Geo-Query (Linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 401 (Not Authorized)\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "intersects"
										},
										{
											"key": "geometry",
											"value": "linestring"
										},
										{
											"key": "coordinates",
											"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 054c: 404 (not found) - Geo-Query (Linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code\r",
											"pm.test(\"response is 404 (Not Found)\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test the response header\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"// Test the response\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce812&geoproperty=location&georel=intersects&geometry=linestring&coordinates=[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]&options=count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce812"
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "intersects"
										},
										{
											"key": "geometry",
											"value": "linestring"
										},
										{
											"key": "coordinates",
											"value": "[[72.842,31.2],[72.923,30.8],[72.74,30.34],[72.9,30.1],[72.67,30]]"
										},
										{
											"key": "options",
											"value": "count"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "G2 (Complex) POST Queries",
			"item": [
				{
					"name": "Complex Search (Post queries)",
					"item": [
						{
							"name": "Test 055a: 200 (success) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=10\",\n        \"geoproperty\": \"location\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 056a: 400 (invalid params) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQuery\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 056b: 404 (not found) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce812\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 056c: 401 (not authorized) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 057a: 200 (success) - temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"endtime\": \"2020-10-19T15:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 058a: 400 (invalid param) - temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerelation\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 058b: 404 (not found) - temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce812\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 058c: 401 (not authorized) temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 059a: 200 (success) - temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-11-22T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 060a: 400 (invalid params) - temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerelation\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 060b: 404 (not found) - temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce812\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 060c: 401 (not authorized) - temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 061a: 200 (success) - temporal (before) + response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-11-22T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"attrs\":\"id\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 062a: 400 (invalid params) - temporal (before) + response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerelation\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"attrs\":\"id\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 062b: 404 (not found) - temporal (before) + response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce812\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"attrs\":\"id\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 062c: 401(not authorized) - temporal (before) + response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"attrs\":\"id\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 063a: 200 (success) - complex - geo - (circle) + temporal (between) + attribute (>) + response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-10-18T14:20:00Z\",\n        \"endtime\": \"2020-11-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0\",\n    \"attrs\":\"id,speed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 064a: 400 (invalid params)  - complex - geo - (circle) + temporal (between) + attribute (>) + response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQuery\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0\",\n    \"attrs\":\"id,speed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 064b: 404 (not found)  - complex - geo - (circle) + temporal (between) + attribute (>) + response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce822\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0\",\n    \"attrs\":\"id,speed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 064c: 401 (not authorized ) - complex - geo - (circle) + temporal (between) + attribute (>) + response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0\",\n    \"attrs\":\"id,speed\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 065a: 200 (success) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.76,21.15],[72.76,21.13],[72.78,21.13],[72.76,21.15]]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 066a: 400 (invalid params) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georelation\": \"within\",\n        \"geoproperty\": \"geoJsonLocation\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 066b: 404 (not found) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce812\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 066c: 401 (not authorized) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 067a: 200 (success) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 068a: 400 (invalid params) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georelation\": \"within\",\n        \"geoproperty\": \"geoJsonLocation\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 068b: 404 (not found) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce812\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 068c: 401 (not authorized) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 069a: 200 (success) - Geo-Query (linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"id\", \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.840269,21.204184],[72.750994,21.138154]],\n        \"georel\": \"intersects\",\n        \"geoproperty\": \"location\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 070a: 400 (invalid params) - Geo-Query (linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20]],\n        \"georelation\": \"intersects\",\n        \"geoproperty\": \"geoJsonLocation\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 070b: 404 (not found) - Geo-Query (linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce812\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20]],\n        \"georel\": \"intersects\",\n        \"geoproperty\": \"location\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 070c: 401 (not authorized) - Geo-Query (linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20]],\n        \"georel\": \"intersects\",\n        \"geoproperty\": \"location\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Complex Count (Post queries)",
					"item": [
						{
							"name": "Test 071a: 200 (success) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 1109);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 072a: 400 (invalid params) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQuery\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 072b: 404 (not found) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce812\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 072c: 401 (not authorized) - Geo-Query (circle)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 073a: 200 (success) - temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 20813);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-10-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 074a: 400 (invalid param) - temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerelation\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 074b: 404 (not found) - temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce812\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 074c: 401 (not authorized) temporal (between)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 075a: 200 (success) - temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 20813);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-10-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 076a: 400 (invalid params) - temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerelation\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 076b: 404 (not found) - temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce812\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 076c: 401 (not authorized) - temporal (before)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"temporalQ\": {\n        \"timerel\": \"before\",\n        \"time\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 077a: 200 (success) - complex - geo - (circle) + temporal (between) + attribute (>)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 327);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-10-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0\",\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 078a: 400 (invalid params)  - complex - geo - (circle) + temporal (between) + attribute (>)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQuery\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0\",\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 078b: 404 (not found)  - complex - geo - (circle) + temporal (between) + attribute (>)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce812\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0\",\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 078c: 401 (not authorized ) - complex - geo - (circle) + temporal (between) + attribute (>)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Point\",\n        \"coordinates\": [21.178,72.834],\n        \"georel\": \"near;maxDistance=1000\",\n        \"geoproperty\": \"location\"\n    },\n    \"temporalQ\": {\n        \"timerel\": \"between\",\n        \"time\": \"2020-09-18T14:20:00Z\",\n        \"endtime\": \"2020-09-19T14:20:00Z\",\n        \"timeProperty\": \"observationDateTime\"\n    },\n    \"q\":\"speed>30.0\",\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/temporal/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"temporal",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 079a: 200 (success) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 2761);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 080a: 400 (invalid params) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georelation\": \"within\",\n        \"geoproperty\": \"geoJsonLocation\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 080b: 404 (not found) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce812\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 080c: 401 (not authorized) - Geo-Query (Polygon)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"Polygon\",\n        \"coordinates\": [[[72.719,21],[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20],[72.719,21]]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 081a: 200 (success) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 21);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 082a: 400 (invalid params) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georelation\": \"within\",\n        \"geoproperty\": \"geoJsonLocation\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 082b: 404 (not found) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce812\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 082c: 401 (not authorized) - Geo-Query (bbox)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"bbox\",\n        \"coordinates\": [[72.8296,21.2],[72.8297,21.15]],\n        \"georel\": \"within\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 083a: 200 (success) - Geo-Query (linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");",
											"    const resultsjsonData = body.results[0];",
											"    pm.expect(resultsjsonData).to.have.property(\"totalHits\", 9);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{secureResourceToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.840269,21.204184],[72.750994,21.138154]],\n        \"georel\": \"intersects\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 084a: 400 (invalid params) - Geo-Query (linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 400 (Bad Request Data)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20]],\n        \"georelation\": \"intersects\",\n        \"geoproperty\": \"geoJsonLocation\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 084b: 404 (not found) - Geo-Query (linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{secureResourceToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce812\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20]],\n        \"georel\": \"intersects\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 084c: 401 (not authorized) - Geo-Query (linestring)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Test the response code",
											"pm.test(\"response is 401 (Not Authorized)\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"// Test the response header",
											"pm.test(\"Check response header\", function () {",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
											"});",
											"",
											"// Test the response",
											"pm.test(\"Check response body\", function () {    ",
											"    const body = pm.response.json();",
											"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"Query\",\n    \"entities\": [\n        {\n            \"id\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n        }\n    ],\n    \"geoQ\": {\n        \"geometry\": \"linestring\",\n        \"coordinates\": [[72.842,21.2],[72.923,20.8],[72.74,20.34],[72.9,20.1],[72.67,20]],\n        \"georel\": \"intersects\",\n        \"geoproperty\": \"location\"\n    },\n    \"options\":\"count\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ngsi-ld/v1/entityOperations/query",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entityOperations",
										"query"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "G3 (Subscription)",
			"item": [
				{
					"name": "Test 085a: 201 (success) Create a Subscription",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							},
							{
								"key": "options",
								"value": "streaming",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"alias-name-of-application\",\n    \"type\": \"subscription\",\n    \"entities\": [\n        \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 086a: 400 (invalid params) Create a Subscription",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							},
							{
								"key": "options",
								"value": "streaming-subscription",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"alias-name-of-application\",\n    \"type\": \"subscription\",\n    \"entities\": [\n        \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 086b: 401 (invalid credentials) Create a Subscription",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}+invalid",
								"type": "text"
							},
							{
								"key": "options",
								"value": "streaming",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"alias-name-of-application\",\n    \"type\": \"subscription\",\n    \"entities\": [\n        \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 087a: 200 (success) Retrieve a Subscription",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "default"
							},
							{
								"key": "options",
								"value": "streaming",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription/15c7506f-c800-48d6-adeb-0542b03947c6/alias-name-of-application",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription",
								"15c7506f-c800-48d6-adeb-0542b03947c6",
								"alias-name-of-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 088a: 400 (invalid params) Retrieve a Subscription",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "default"
							},
							{
								"key": "options",
								"value": "invalid-params-in-streaming-subscription",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription/15c7506f-c800-48d6-adeb-0542b03947c6/alias-name-of-application",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription",
								"15c7506f-c800-48d6-adeb-0542b03947c6",
								"alias-name-of-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 088b: 401 (invalid credentials) Retrieve a Subscription",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}+invalid",
								"type": "default"
							},
							{
								"key": "options",
								"value": "streaming",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription/15c7506f-c800-48d6-adeb-0542b03947c6/alias-name-of-application",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription",
								"15c7506f-c800-48d6-adeb-0542b03947c6",
								"alias-name-of-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 089a: 200 (success) Update a Subscription",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "default"
							},
							{
								"key": "options",
								"value": "streaming",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"alias-name-of-application\",\n    \"type\": \"subscription\",\n    \"entities\": [\n        \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription/15c7506f-c800-48d6-adeb-0542b03947c6/alias-name-of-application",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription",
								"15c7506f-c800-48d6-adeb-0542b03947c6",
								"alias-name-of-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 090a: 400 (invalid params) Update a Subscription",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							},
							{
								"key": "options",
								"value": "invalid-params-in-streaming-subscription",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"alias-name-of-application\",\n    \"type\": \"subscription\",\n    \"entities\": [\n        \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 090b: 401 (invalid credentials) Update a Subscription",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}+invalid",
								"type": "text"
							},
							{
								"key": "options",
								"value": "streaming",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"alias-name-of-application\",\n    \"type\": \"subscription\",\n    \"entities\": [\n        \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 091a: 200 (success) Append a Subscription",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "default"
							},
							{
								"key": "options",
								"value": "streaming",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"alias-name-of-application\",\n    \"type\": \"subscription\",\n    \"entities\": [\n        \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription/15c7506f-c800-48d6-adeb-0542b03947c6/alias-name-of-application",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription",
								"15c7506f-c800-48d6-adeb-0542b03947c6",
								"alias-name-of-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 092a: 400 (invalid params) Append a Subscription",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							},
							{
								"key": "options",
								"value": "invalid-params-in-streaming-subscription",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"alias-name-of-application\",\n    \"type\": \"subscription\",\n    \"entities\": [\n        \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 092b: 401 (invalid credentials) Append a Subscription",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}+invalid",
								"type": "text"
							},
							{
								"key": "options",
								"value": "streaming",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"alias-name-of-application\",\n    \"type\": \"subscription\",\n    \"entities\": [\n        \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 093a: 200 (success) Delete a Subscription",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "default"
							},
							{
								"key": "options",
								"value": "streaming",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription/15c7506f-c800-48d6-adeb-0542b03947c6/alias-name-of-application",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription",
								"15c7506f-c800-48d6-adeb-0542b03947c6",
								"alias-name-of-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 094a: 400 (invalid params) Delete a Subscription",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "default"
							},
							{
								"key": "options",
								"value": "invalid-params-in-streaming-subscription",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription/15c7506f-c800-48d6-adeb-0542b03947c6/alias-name-of-application",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription",
								"15c7506f-c800-48d6-adeb-0542b03947c6",
								"alias-name-of-application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 094b: 401 (invalid credentials) Delete a Subscription",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}+invalid",
								"type": "default"
							},
							{
								"key": "options",
								"value": "streaming",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ngsi-ld/v1/subscription/15c7506f-c800-48d6-adeb-0542b03947c6/alias-name-of-application",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscription",
								"15c7506f-c800-48d6-adeb-0542b03947c6",
								"alias-name-of-application"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://localhost:8443"
		},
		{
			"key": "streaming-alias",
			"value": "alias-name"
		},
		{
			"key": "id",
			"value": "datakaveri.org/3ae88e7ba006938ffc38203d326b1711b892226d/rs.iudx.io/aqmtesting"
		}
	]
}